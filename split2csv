#!/bin/ksh
#
# Filter to convert an incoming HTML containint splits from Briefing.com
# into a .CSV file, suitable for input into Excel.
# Latest entries will replace older entries.
#
# Modification History
# ~~~~~~~~~~~~~~~~~~~~
# 01	Greg Tarsa, 12-Jan-99
#	Wrote original code.
#

tmpfile=/tmp/splits-tmp$$-a
datafile=$HOME/unpack/auto/splits.txt
bckfile=$HOME/unpack/auto/splits.bak
csvfile=$HOME/unpack/auto/splits.csv

# set cleanup trap
trap 'rm -f $tmpfile' 0 1 12 15

# Rejoin split lines
# grab the update date & table entries
# clean out the HTML
sed -f ~/bin/PC-conv.sed |
	egrep '<P><B>Updated:|^<TR ALIGN=CENTER ><TD ALIGN=LEFT>' |
	sed '	s@<TR ALIGN=CENTER.*TD ALIGN=LEFT>@@
		s@</TD><TD>@	@g
		s@<BR>@@g
		s@</TD></TR>@@' > $tmpfile

# Extract the update date
date=`sed -n '/<P><B>Updated: /{
		s@@@
		s@</B></P>@@
		p
		q
		}' $tmpfile`

# Convert update to sortable numeric string
IFS='-'
set $date
case $2 in
    Jan) date="20${3}-01-${1}" ;;
    Feb) date="20${3}-02-${1}" ;;
    Mar) date="20${3}-03-${1}" ;;
    Apr) date="20${3}-04-${1}" ;;
    May) date="20${3}-05-${1}" ;;
    Jun) date="20${3}-06-${1}" ;;
    Jul) date="20${3}-07-${1}" ;;
    Aug) date="20${3}-08-${1}" ;;
    Sep) date="20${3}-09-${1}" ;;
    Oct) date="20${3}-10-${1}" ;;
    Nov) date="20${3}-11-${1}" ;;
    Dec) date="20${3}-12-${1}" ;;
    *)   date="20${3}-??-${1}" ;;
esac
IFS=''

# If the datafile already exists. . .
test -f $datafile &&
   {
   # . . .save the original as backup
   mv -f $datafile $bckfile
   cp $bckfile $datafile
   }

# Prepend the date onto the split records
# append to end of data file
sed "/<P><B>Updated: /d; s/^/$date	/g" $tmpfile >> $datafile

# sort cumulative file
# weed out duplicate symbol names
#sort -t'	' -k3 -k1 $datafile |
#	sort -t'	' -r -u -k3 |
#	sort -t'	' -k2 > $tmpfile

# sort the list by symbol first, then by date.  This puts the latest last.
# the awk script scans the list and keeps the last entry for each symbol.
sort -t'	' -k3 -k1 $datafile |
    awk -F'	' '
	# set OFS to "tab and set saved sym to null
	BEGIN { OFS="	"; prev_sym="" }

	# if previous record is non-null and different, then print
	prev_sym && prev_sym != $3 { print prev_line }

	# save current as new previous
	{ prev_sym=$3; 	prev_line=$0 }

        # print out the last line
        END {print prev_line}' > $tmpfile

mv -f $tmpfile $datafile

# Create the csv file 
echo "Updated,Company,Symbol,Ratio,Payable,Ex-Date,Announced,Optionable?" > $csvfile
awk -F'	' '{$4="@ "$4; OFS="	"; print}' $datafile |
  sed '	s/	/","/g
	s/^/"/
	s/$/"/'  >> $csvfile

exit


