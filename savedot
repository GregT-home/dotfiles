#!/bin/bash
Help = "savedot - move the specified 'dotfiles' to the ~/bin/dotfiles directory
and then symbolically link them back into the home directory.

This allows the files to be visible in the dotfiles directory makes it
more straightforward to use git, or another code control system, to manage
files.

Usage: savedot file [file ...]

The script will display the actions it takes.
"
destdir=~/bin/dotfiles
# todo: create destdir, if non-existent

(cd $i
    for i in $@
    do
	# todo: create non-prefixed version of $i, nondot_i
	# todo: move $i to ~/bin/dotfiles/$nondot_i
	# todo: ln -s ~/$i ~/bin/dotfiles/$nondot_i
    done
) # end main loop

# todo: display an appropriate "update your git repo now" message.


cat > /dev/null <<EOF
# code is from http://blog.smalleycreative.com/tutorials/using-git-and-github-to-manage-your-dotfiles/

Need someting like this to restore dotfiles to other systems

gt: March 2014

#!/bin/bash
############################
# .make.sh
# This script creates symlinks from the home directory to any desired dotfiles in ~/dotfiles
############################

########## Variables

dir=~/dotfiles                    # dotfiles directory
olddir=~/dotfiles_old             # old dotfiles backup directory
files="bashrc vimrc vim zshrc oh-my-zsh"    # list of files/folders to symlink in homedir

##########

# create dotfiles_old in homedir
echo "Creating $olddir for backup of any existing dotfiles in ~"
mkdir -p $olddir
echo "...done"

# change to the dotfiles directory
echo "Changing to the $dir directory"
cd $dir
echo "...done"

# move any existing dotfiles in homedir to dotfiles_old directory, then create symlinks 
for file in $files; do
    echo "Moving any existing dotfiles from ~ to $olddir"
    mv ~/.$file ~/dotfiles_old/
    echo "Creating symlink to $file in home directory."
    ln -s $dir/$file ~/.$file
done

EOF
