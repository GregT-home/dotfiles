set nocompatible " no compatibility with legacy vi (also req'd for Vundle)
if has("gui_running")
  if !empty(glob("~/.vim/bundle/Vundle.vim/*"))
    filetype off     " Vundle needs this off for initialization
    "" Intialize Vundle and load plugins.  See ":h vundle" for more info.
    set runtimepath+=~/.vim/bundle/Vundle.vim
    call vundle#begin()
    Plugin 'gmarik/Vundle.vim'

    "" my plugins
    Plugin 'junegunn/fzf'             " fuzzy file search (see color customizations later)
    map <c-p> :FZF<CR>
    map <c-p><cr> +
    if executable('ag')             " use ag (the_silver_surfer), if available
      let g:ackprg = 'ag --vimgrep'
    endif

    Plugin 'xolox/vim-misc'           " base lib for other xolox plugins
    Plugin 'xolox/vim-shell'          " needed for easytags async processing
    Plugin 'ludovicchabant/vim-gutentags' " automatic tags management
    Plugin 'lifepillar/vim-colortemplate' " color template editor (:help colortemplate)

    Plugin 'skywind3000/gutentags_plus'   " automatic tag project-file management
    "++
    " gutentags options
    "   (from https://vimawesome.com/plugin/gutentags-plus)
    let g:gutentags_modules = []  " enable gtags module(s)
    if executable('ctags')
      let g:gutentags_modules += ['ctags']
    endif
    if executable('gtags-cscope') && executable('gtags')
      let g:gutentags_modules += ['gtags_cscope']
    endif
    let g:gutentags_project_root = ['package.json', '.git']  " config extra project root markers (def includes '.git')
    let g:gutentags_cache_dir = expand('~/.cache/vim/ctags/')  " generate DBs in cache directory, centralize gtags files
    let g:gutentags_plus_switch = 1                          " change focus to quickfix window after search (optional).
    " Let gutentags generate tags under most circumstances
    let g:gutentags_generate_on_new = 1
    let g:gutentags_generate_on_missing = 1
    let g:gutentags_generate_on_write = 1
    let g:gutentags_generate_on_empty_buffer = 0
    " Generate extra tag info
    "   a: Access (or export) of class members; i: Inheritance information; l: Language of input file containing tag
    "   m: Implementation information; n: Line number of tag definition;
    "   S: Signature of routine (e.g. prototype or parameter list)
    let g:gutentags_ctags_extra_args = [ '--tag-relative=yes', '--fields=+ailmnS', ]
    " Speed things up by not indexing this kinds of files/dirs
    let g:gutentags_ctags_exclude = [
          \ '*.git', '*.svg', '*.hg',
          \ '*/tests/*',
          \ 'build',
          \ 'dist',
          \ '*sites/*/files/*',
          \ 'bin',
          \ 'node_modules',
          \ 'bower_components',
          \ 'cache',
          \ 'compiled',
          \ 'docs',
          \ 'example',
          \ 'bundle',
          \ '*.md',
          \ '*-lock.json',
          \ '*.lock',
          \ '*bundle*.js',
          \ '*build*.js',
          \ '.*rc*',
          \ '*.json',
          \ '*.min.*',
          \ '*.map',
          \ '*.bak',
          \ '*.zip',
          \ '*.pyc',
          \ '*.class',
          \ '*.sln',
          \ '*.Master',
          \ '*.csproj',
          \ '*.tmp',
          \ '*.csproj.user',
          \ '*.cache',
          \ '*.pdb',
          \ 'tags*',
          \ 'cscope.*',
          \ '*.css',
          \ '*.less',
          \ '*.scss',
          \ '*.exe', '*.dll',
          \ '*.mp3', '*.ogg', '*.flac',
          \ '*.swp', '*.swo',
          \ '*.bmp', '*.gif', '*.ico', '*.jpg', '*.png',
          \ '*.rar', '*.zip', '*.tar', '*.tar.gz', '*.tar.xz', '*.tar.bz2',
          \ '*.pdf', '*.doc', '*.docx', '*.ppt', '*.pptx',
          \ ]
    " (from https://vimawesome.com/plugin/gutentags-plus Troubleshooting section.  Troubleshoot cscope failure)
    let g:gutentags_define_advanced_commands = 1
    " then use "GutentagsToggleTrace; :GutentagsUpdate; and :messages to debug
    "-- End options

    Plugin 'michaeljsmith/vim-indent-object'  " indent according to tab level
    " doc for vim-ruby: https://github.com/vim-ruby/vim-ruby/wiki/VimRubySupport
    Plugin 'vim-ruby/vim-ruby'        " indentation for Ruby
    Plugin 'kana/vim-textobj-user'    " foundation for writing your own text object cmds
    Plugin 'nelstrom/vim-textobj-rubyblock' " indentation for ruby blocks
    Plugin 'slim-template/vim-slim' " slim support
    Plugin 'tpope/vim-commentary' " gc for commenting
    Plugin 'tpope/vim-endwise'        " intelligent 'end' addition for coding
    Plugin 'tpope/vim-rails'          " rails support.  :help rails-
    Plugin 'tpope/vim-eunuch'         " :Rename, :Locate and friends
    Plugin 'tpope/vim-fugitive'       " :GBlame and other git integrations
    Plugin 'kchmck/vim-coffee-script'
    Plugin 'vim-scripts/camelcasemotion'
    Plugin 'AndrewRadev/splitjoin.vim'
    Plugin 'sheerun/vim-polyglot'     " Lots of on-demand language support
    "Plugin 'mustache/vim-mustache-handlebars' " {{ support for emberjs & friends
    Plugin 'mileszs/ack.vim'          " :ack support
    Plugin 'thoughtbot/vim-rspec'     " :rspec support
    map <Leader>t :up<CR>:call RunCurrentSpecFile()<CR>
    map <Leader>s :up<CR>:call RunNearestSpec()<CR>
    map <Leader>l :call RunLastSpec()<CR>
    map <Leader>a :call RunAllSpecs()<CR>
    let g:rspec_command = "rspec -fd --order defined --no-profile {spec}"
    " let g:rspec_command = "time zeus rspec -fd --order defined --no-profile {spec}"

    Plugin 'terryma/vim-multiple-cursors'  " Cool multi-cursor support
    " if executable('ruby')
    "   Plugin 'stefanoverna/vim-i18n'    " I18n help in VISUAL mode
    "   vmap <Leader>z :call I18nTranslateString()<CR>
    "   vmap <Leader>Z :call I18nDisplayTranslation()<CR>
    " endif

    call vundle#end() " end of Vundle plugin list
    filetype plugin on " required by Vundle
    filetype indent on " required by Vundle
  endif

  " Make CMD-click like RubyMine/etc (not yet working)
  nnoremap <D-LeftMouse> :tag <CR>

  "" Set to save named files when focus leaves the GUI
  " autocmd FocusLost * silent! wa
  autocmd FocusLost * stopinsert | silent!  wa

  "" Setup builtin plugin netrw to look like NERDtree
  let g:netrw_liststyle = 3     " Use tree-style listing format
  "let g:netrw_banner = 0 " Don't display heading with cmd summaries
  let g:netrw_browse_split = 1  " Open files in new H-split
  let g:netrw_winsize = 25      " Use 25% of width for listing
  map <leader>n :Vexplore .     " explore the project directory<CR>
  map <leader>d :Vexplore       " explore the dir of the current file<CR>

  "" Status line customizations
  set laststatus=2	" always show the status line
  set statusline=
  set statusline+=%-3.3n\      " buffer number
  set statusline+=%f\           " filename
  set statusline+=%h%m%r%w      " status flags

  "" Tab Management, Indentation, tabbing, and whitespace
  set smartindent tabstop=2 shiftwidth=2 expandtab

  if !empty(glob("~/.vim/_partials/tab_mgt*"))
    source ~/.vim/_partials/tab_mgt.vim
  endif

  "" indentation by language type (i.e. Typescript convention at OMCL wants 4 spaces)
  autocmd Filetype typescript setlocal expandtab tabstop=4 shiftwidth=4 softtabstop=4 smartindent

  "" status line settings
  set laststatus=2  " always maintain a status line
  if version >= 700
    au InsertEnter * hi StatusLine term=reverse ctermbg=5 gui=undercurl guisp=Magenta
    au InsertLeave * hi StatusLine term=reverse ctermfg=0 ctermbg=2 gui=bold,reverse
    " au InsertEnter * hi StatusLine term=reverse ctermbg=5           guibg=Pink2     gui=bold,reverse
    " au InsertLeave * hi StatusLine term=reverse ctermfg=0 ctermbg=2 guifg=PaleGreen gui=bold,reverse
  endif

  " XML folding
  let g:xml_syntax_folding=1
  au FileType xml setlocal foldmethod=syntax

  " CtrlP directives to ignore (per ctrlp docs)
  let g:ctrlp_custom_ignore = {
        \ 'dir': '\v(bower_components|node_modules)$',
        \ }

  "" VIMs back up feature prevents write in place and crontab requires it
  autocmd FileType crontab setlocal nobackup nowritebackup

  "" Set GVIM for 120 character code lines by default
  "" Also set a color column if we are in a GUI
  " set the window width
  let targetwidth=120

  " set window width to target + 4 for line numbers
  let &columns=targetwidth + 4

  if v:version >= 703
    let &colorcolumn=targetwidth

    " use a faint gray color, not too insistent
    highlight ColorColumn term=reverse ctermbg=253 guibg=#e6e6e6

    " if we're called as '*view', or on a console, turn off the colorcolumn
    if v:progname =~? 'view' || &term =~? 'linux|console'
      set colorcolumn=
    endif
  endif

  "" colors and fonts
  set background=light
  colorscheme gt_solarized8_high
  if has("macunix")
    set guifont=Menlo:h14
    "set guifont=Anonymous_Pro:h14
    "set guifont=Inconsolata:h14
  endif
  if has("gui_gtk2")
    set guioptions -=T  " remove toolbar
    set guifont=Anonymous\ Pro\ 14
    "set guifont=Inconsolata\ 12
    "set guifont=Menlo\ 12
  endif
endif

"" Highlighting & cursor
if has("gui_running")  "match brackets w/ lighter bg
  highlight MatchParen guibg=HoneyDew gui=bold,underline
else
  highlight MatchParen ctermbg=LightGrey cterm=bold,reverse,underline
endif

if has("gui_running") " set wrapping target column
  set textwidth=90
else
  set textwidth=72
endif

"" General settings for all modes
autocmd BufWritePre * :%s/\s\+$//e  " remove trailing whitespace on buffer write
syntax enable	      " enable syntax sensitivity (enable=use my highlight colors, on=use defaults)
filetype indent on	" enable filetype-specific indentation
set mouse=a         " enable mouse interaction with non-gui vim
set encoding=utf-8
set showcmd		" display incomplete cmds
set number    " turn line numbering on

"" Searching
set nohlsearch    " do not highlight matches
set noincsearch   " do not incremental search
set ignorecase    " be case-insensitive...
set smartcase     "... unless first letter is capitalized

"" Set print conversion options (note: only Courier is only allowed font)
"" h7 works, also, but is very small.
set printfont=courier:10
set printoptions=left:1pc,right:1pc,top:1pc,bottom:1pc,header:1
set popt+=portrait:n

"" Session options
set sessionoptions-=options " don't save options when making sessions

"" swap files
set directory=/tmp,~/.vim/tmp,/var/tmp,.

"" Window management
set splitbelow	" these defaults feel more natural
set splitright
