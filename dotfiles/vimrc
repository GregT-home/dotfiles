set nocompatible " no compatibility with legacy vi (also req'd for Vundle)
if !empty(glob("~/.vim/bundle/Vundle.vim/*"))
  filetype off     " Vundle needs this off for initialization
  "" Intialize Vundle and load plugins.  See ":h vundle" for more info.
  set runtimepath+=~/.vim/bundle/Vundle.vim
  call vundle#begin()
  Plugin 'gmarik/Vundle.vim'
  " my plugins
  Plugin 'kien/ctrlp.vim'           " ^P to invoke
  Plugin 'scrooloose/nerdtree'      " \n to open NerdTree
  Plugin 'tpope/vim-commentary.git' " gc for commenting
  Plugin 'xolox/vim-misc'           " base lib for other xolox plugins
  Plugin 'xolox/vim-easytags'       " automatic tag file management
  " doc for vim-ruby: https://github.com/vim-ruby/vim-ruby/wiki/VimRubySupport
  Plugin 'vim-ruby/vim-ruby'        " indentation for Ruby
  Plugin 'tpope/vim-endwise'        " intelligent 'end' addition for coding
  Plugin 'kana/vim-textobj-user'    " foundation for writing your own text object cmds
  Plugin 'nelstrom/vim-textobj-rubyblock' " indentation for ruby blocks
  Plugin 'slim-template/vim-slim.git' " Slim support
  Plugin 'michaeljsmith/vim-indent-object'  " indent according to tab level
  Plugin 'tpope/vim-rails'          " Rails support.  :help rails-
  Plugin 'kchmck/vim-coffee-script'
  Plugin 'vim-scripts/camelcasemotion'
  Plugin 'AndrewRadev/splitjoin.vim'

  call vundle#end() " end of Vundle plugin list
  filetype plugin on " required by Vundle
  filetype indent on " required by Vundle
endif

"" General settings
autocmd BufWritePre * :%s/\s\+$//e  " remove trailing whitespace on buffer write
set encoding=utf-8
set showcmd		" display incomplete cmds
set number    " turn line numbering on
syntax on		" enable syntax sensitivity
filetype on		" enable filetype detection
set mouse=a   " enable mouse interaction with non-gui vim

"" Highlighting & cursor
if has("gui_running")  "match brackets w/ lighter bg
  highlight MatchParen guibg=HoneyDew gui=bold,underline
else
  highlight MatchParen ctermbg=LightGrey cterm=bold,reverse,underline
endif

"" Status line customizations
set laststatus=2	" always show the status line
set statusline=
set statusline+=%-3.3n\      " buffer number
set statusline+=%f\           " filename
set statusline+=%h%m%r%w      " status flags

"" Tab Management, Indentation, tabbing, and whitespace
filetype indent on	" enable filetype-specific indentation
set smartindent
set tabstop=2
set shiftwidth=2
set expandtab
if !empty(glob("~/.vim/_partials/tab_mgt*"))
  source ~/.vim/_partials/tab_mgt.vim
endif

"" Searching
set nohlsearch		" do not highlight matches
set noincsearch		" do not incremental search
set ignorecase		" be case-insensitive...set
set smartcase		"... unless first letter is capitalized

"" colors and fonts
if has('gui_running')
  set background=light
  colorscheme solarized
  if has("macunix")
    set guifont=Menlo:h12
    "set guifont=Anonymous_Pro:h14
    "set guifont=Inconsolata:h14
  endif
  if has("gui_gtk2")
    set guioptions -=T  " remove toolbar
    set guifont=Anonymous\ Pro\ 12
    "set guifont=Inconsolata\ 12
    "set guifont=Menlo\ 12
  endif
endif

"" Session options
set sessionoptions-=options " don't save options when making sessions

"" status line settings
set laststatus=2  " always maintain a status line
if version >= 700
  au InsertEnter * hi StatusLine term=reverse ctermbg=5 gui=undercurl guisp=Magenta
  au InsertLeave * hi StatusLine term=reverse ctermfg=0 ctermbg=2 gui=bold,reverse
  " au InsertEnter * hi StatusLine term=reverse ctermbg=5           guibg=Pink2     gui=bold,reverse
  " au InsertLeave * hi StatusLine term=reverse ctermfg=0 ctermbg=2 guifg=PaleGreen gui=bold,reverse
endif

"" key mappings
map <leader>n :NERDTreeToggle<CR>
map <leader>d :execute 'NERDTreeToggle ' . getcwd()<CR>

"" swap files
set directory=/tmp,~/.vim/tmp,/var/tmp,.

"" Window management
set splitbelow	" these defaults feel more natural
set splitright

"" Favorite Macros
let @w='?:wd$jdd:w'
let @p='OPry.rescue do/endOendqkb=ii'
let @f=':set fdm=indent:set foldlevel=1:set fdm=manual'
let @s='O---\/jo---/\k/2014w'

" XML folding
let g:xml_syntax_folding=1
au FileType xml setlocal foldmethod=syntax

" CtrlP directives to ignore (per ctrlp docs)
let g:ctrlp_custom_ignore = {
 \ 'dir': '\v(bower_components|node_modules)$',
 \ }

"" VIMs back up feature prevents write in place and crontab requires it
autocmd filetype crontab setlocal nobackup nowritebackup
