set nocompatible " no compatibility with legacy vi (also req'd for Vundle)
if !empty(glob("~/.vim/bundle/Vundle.vim/*"))
  filetype off     " Vundle needs this off for initialization
  "" Intialize Vundle and load plugins.  See ":h vundle" for more info.
  set runtimepath+=~/.vim/bundle/Vundle.vim
  call vundle#begin()
  Plugin 'gmarik/Vundle.vim'
  " my plugins
  Plugin 'kien/ctrlp.vim'           " ^P to invoke
  Plugin 'junegunn/fzf'             " add fzf :Files & :Commits
  let g:ctrlp_max_files=25000       " double the number of files to accomodate WF2
  " Plugin 'scrooloose/nerdtree'    " \n to open NerdTree
  "   map <leader>n :NERDTreeToggle<CR>
  "   map <leader>d :execute 'NERDTreeToggle ' . getcwd()<CR>
  Plugin 'xolox/vim-misc'           " base lib for other xolox plugins
  Plugin 'xolox/vim-easytags'       " automatic tag file management
  " doc for vim-ruby: https://github.com/vim-ruby/vim-ruby/wiki/VimRubySupport
  Plugin 'vim-ruby/vim-ruby'        " indentation for Ruby
  Plugin 'kana/vim-textobj-user'    " foundation for writing your own text object cmds
  Plugin 'nelstrom/vim-textobj-rubyblock' " indentation for ruby blocks
  Plugin 'slim-template/vim-slim.git' " slim support
  Plugin 'michaeljsmith/vim-indent-object'  " indent according to tab level
  Plugin 'tpope/vim-commentary.git' " gc for commenting
  Plugin 'tpope/vim-endwise'        " intelligent 'end' addition for coding
  Plugin 'tpope/vim-rails'          " rails support.  :help rails-
  Plugin 'tpope/vim-eunuch'         " :Rename, :Locate and friends
  Plugin 'kchmck/vim-coffee-script'
  Plugin 'vim-scripts/camelcasemotion'
  Plugin 'AndrewRadev/splitjoin.vim'
  Plugin 'sheerun/vim-polyglot'     " Lots of on-demand language support
  "Plugin 'mustache/vim-mustache-handlebars' " {{ support for emberjs & friends
  Plugin 'mileszs/ack.vim'          " :ack support
  Plugin 'thoughtbot/vim-rspec'     " :rspec support
    map <Leader>t :call RunCurrentSpecFile()<CR>
    map <Leader>s :call RunNearestSpec()<CR>
    map <Leader>l :call RunLastSpec()<CR>
    map <Leader>a :call RunAllSpecs()<CR>
    " let g:rspec_command = "rspec --format doc --order defined {spec}"
    let g:rspec_command = "zeus rspec --format doc --order defined {spec}"
  Plugin 'terryma/vim-multiple-cursors'  " Cool multi-cursor support
  Plugin 'stefanoverna/vim-i18n'    " I18n help in VISUAL mode
    vmap <Leader>z :call I18nTranslateString()<CR>
    vmap <Leader>Z :call I18nDisplayTranslation()<CR>

  call vundle#end() " end of Vundle plugin list
  filetype plugin on " required by Vundle
  filetype indent on " required by Vundle
endif

"" Setup builtin plugin netrw to look like NERDtree
let g:netrw_liststyle = 3     " Use tree-style listing format
"let g:netrw_banner = 0 " Don't display heading with cmd summaries
let g:netrw_browse_split = 1  " Open files in new H-split
let g:netrw_winsize = 25      " Use 25% of width for listing
map <leader>n :Vexplore .     " explore the project directory<CR>
map <leader>d :Vexplore       " explore the dir of the current file<CR>


"" General settings
autocmd BufWritePre * :%s/\s\+$//e  " remove trailing whitespace on buffer write
set encoding=utf-8
set showcmd		" display incomplete cmds
set number    " turn line numbering on
syntax on		" enable syntax sensitivity
filetype on		" enable filetype detection
set mouse=a   " enable mouse interaction with non-gui vim

"" ctags processing (from https://github.com/xolox/vim-easytags)
set tags=tags
let g:easytags_dynamic_files = 2 " only use ~/.tags when cwd is not writable
set cpoptions+=d                 " make tag file in cwd, not relative to edited file

"" Highlighting & cursor
if has("gui_running")  "match brackets w/ lighter bg
  highlight MatchParen guibg=HoneyDew gui=bold,underline
else
  highlight MatchParen ctermbg=LightGrey cterm=bold,reverse,underline
endif

"" Status line customizations
set laststatus=2	" always show the status line
set statusline=
set statusline+=%-3.3n\      " buffer number
set statusline+=%f\           " filename
set statusline+=%h%m%r%w      " status flags

"" Tab Management, Indentation, tabbing, and whitespace
filetype indent on	" enable filetype-specific indentation
set smartindent
set tabstop=2
set shiftwidth=2
set expandtab
if !empty(glob("~/.vim/_partials/tab_mgt*"))
  source ~/.vim/_partials/tab_mgt.vim
endif

"" Searching
set nohlsearch		" do not highlight matches
set noincsearch		" do not incremental search
set ignorecase		" be case-insensitive...set
set smartcase		"... unless first letter is capitalized

"" colors and fonts
if has('gui_running')
  set background=light
  colorscheme solarized
  if has("macunix")
    set guifont=Menlo:h14
    "set guifont=Anonymous_Pro:h14
    "set guifont=Inconsolata:h14
  endif
  if has("gui_gtk2")
    set guioptions -=T  " remove toolbar
    set guifont=Anonymous\ Pro\ 14
    "set guifont=Inconsolata\ 12
    "set guifont=Menlo\ 12
  endif
endif

"" Session options
set sessionoptions-=options " don't save options when making sessions

"" status line settings
set laststatus=2  " always maintain a status line
if version >= 700
  au InsertEnter * hi StatusLine term=reverse ctermbg=5 gui=undercurl guisp=Magenta
  au InsertLeave * hi StatusLine term=reverse ctermfg=0 ctermbg=2 gui=bold,reverse
  " au InsertEnter * hi StatusLine term=reverse ctermbg=5           guibg=Pink2     gui=bold,reverse
  " au InsertLeave * hi StatusLine term=reverse ctermfg=0 ctermbg=2 guifg=PaleGreen gui=bold,reverse
endif

"" swap files
set directory=/tmp,~/.vim/tmp,/var/tmp,.

"" Window management
set splitbelow	" these defaults feel more natural
set splitright

"" Favorite Macros
let @w='?:wd$jdd:w'  " search back for ':w' delete to EOL, delete next line, write the file

" XML folding
let g:xml_syntax_folding=1
au FileType xml setlocal foldmethod=syntax

" CtrlP directives to ignore (per ctrlp docs)
let g:ctrlp_custom_ignore = {
 \ 'dir': '\v(bower_components|node_modules)$',
 \ }

"" VIMs back up feature prevents write in place and crontab requires it
autocmd filetype crontab setlocal nobackup nowritebackup
