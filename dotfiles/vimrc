set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'gmarik/Vundle.vim'
" my plugins
Plugin 'kien/ctrlp.vim'           " ^P to invoke
Plugin 'scrooloose/nerdtree'      " \n to open NerdTree
Plugin 'tpope/vim-commentary.git' " gc for commenting
Plugin 'xolox/vim-misc'           " base lib for other xolox plugins
Plugin 'xolox/vim-easytags'       " automatic tag file management
" doc for vim-ruby: https://github.com/vim-ruby/vim-ruby/wiki/VimRubySupport
Plugin 'vim-ruby/vim-ruby'        " indentation for Ruby
Plugin 'kana/vim-textobj-user'    " foundation for writing your own text object cmds
Plugin 'nelstrom/vim-textobj-rubyblock' " indentation for ruby blocks
Plugin 'slim-template/vim-slim.git' " Slim support
Plugin 'michaeljsmith/vim-indent-object'  " indent according to tab level
Plugin 'tpope/vim-rails'          " Rails support.  :help rails-


call vundle#end() " end of Vundle plugin list
filetype plugin on " required by Vundle
filetype indent on " required by Vundle

"" General settings
set nocompatible 	" no compatibility with legacy vi
set encoding=utf-8
set showcmd		" display incomplete cmds
set number    " turn line numbering on
syntax on		" enable syntax sensitivity
filetype on		" enable filetype detection

"" Status line customizations
set laststatus=2	" always show the status line
set statusline=
set statusline+=%-3.3n\      " buffer number
set statusline+=%f\           " filename
set statusline+=%h%m%r%w      " status flags

"" Indentation, tabbing, and whitespace
filetype indent on	" enable filetype-specific indentation
set smartindent
set tabstop=2
set shiftwidth=2
set expandtab

"" Searching
set nohlsearch		" do not highlight matches
set noincsearch		" do not incremental search
set ignorecase		" be case-insensitive...set
set smartcase		"... unless first letter is capitalized

"" colors and fonts
if has('gui_running')
  set background=light
  colorscheme solarized
  if has("macunix")
    set guifont=Menlo:h12
    "set guifont=Anonymous_Pro:h14
    "set guifont=Inconsolata:h14
  endif
  if has("gui_gtk2")
    set guioptions -=T  " remove toolbar
    set guifont=Anonymous\ Pro\ 12
    "set guifont=Inconsolata\ 12
    "set guifont=Menlo\ 12
  endif
endif

"" Session options
set sessionoptions-=options " don't save options when making sessions

"" status line settings
set laststatus=2  " always maintain a status line
if version >= 700
  au InsertEnter * hi StatusLine term=reverse ctermbg=5 gui=undercurl guisp=Magenta
  au InsertLeave * hi StatusLine term=reverse ctermfg=0 ctermbg=2 gui=bold,reverse
  " au InsertEnter * hi StatusLine term=reverse ctermbg=5           guibg=Pink2     gui=bold,reverse
  " au InsertLeave * hi StatusLine term=reverse ctermfg=0 ctermbg=2 guifg=PaleGreen gui=bold,reverse
endif

"" key mappings
map <leader>n :NERDTreeToggle<CR>
map <leader>d :execute 'NERDTreeToggle ' . getcwd()<CR>

"" swap files
set directory=/tmp,~/.vim/tmp,/var/tmp,.

"" Window management
set splitbelow	" these defaults feel more natural
set splitright

"" Tab Management

set showtabline=2 " always show tabs in gvim, but not vim
" set up tab labels with tab number, buffer name, number of windows
function! GuiTabLabel()
  let label = ''
  let bufnrlist = tabpagebuflist(v:lnum)
  " Add '+' if one of the buffers in the tab page is modified
  for bufnr in bufnrlist
    if getbufvar(bufnr, "&modified")
      let label = '+'
      break
    endif
  endfor
  " Append the tab number
  " let label .= v:lnum.': '
  " Append the buffer name
  let name = bufname(bufnrlist[tabpagewinnr(v:lnum) - 1])
  if name == ''
    " give a name to no-name documents
    if &buftype=='quickfix'
      let name = '[Quickfix List]'
    else
      let name = '[No Name]'
    endif
  else
    " get only the file name
    let name = fnamemodify(name,":t")
  endif
  let label .= name
  " Append the number of windows in the tab page
  let wincount = tabpagewinnr(v:lnum, '$')
  if wincount > 1
    return label . '|' . wincount
  else
    return label 
  endif
endfunction
set guitablabel=%{GuiTabLabel()}

"" tab tooltips for every buffer
" set up tab tooltips with every buffer name
function! GuiTabToolTip()
  let tip = ''
  let bufnrlist = tabpagebuflist(v:lnum)
  for bufnr in bufnrlist
    " separate buffer entries
    if tip!=''
      let tip .= " \n "
    endif
    " Add name of buffer
    let name=bufname(bufnr)
    if name == ''
      " give a name to no name documents
      if getbufvar(bufnr,'&buftype')=='quickfix'
        let name = '[Quickfix List]'
      else
        let name = '[No Name]'
      endif
    endif
    let tip.=name
    " add modified/modifiable flags
    if getbufvar(bufnr, "&modified")
      let tip .= ' [+]'
    endif
    if getbufvar(bufnr, "&modifiable")==0
      let tip .= ' [-]'
    endif
  endfor
  return tip
endfunction
set guitabtooltip=%{GuiTabToolTip()}

"" Favorite Macros
let @w='?:wd$jdd:w'
let @p='OPry.rescue do/endOendqkb=ii'
let @f=':set fdm=indent:set foldlevel=1:set fdm=manual'
let @s='O---\/jo---/\k/2014w'

" XML folding
let g:xml_syntax_folding=1
au FileType xml setlocal foldmethod=syntax

" CtrlP directives to ignore (per ctrlp docs) 
let g:ctrlp_custom_ignore = {
 \ 'dir': '\v(bower_components|node_modules)$',
 \ }
