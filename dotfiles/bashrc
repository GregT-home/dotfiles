# .bashrc
# Modification History
# ~~~~~~~~~~~~~~~~~~~~
# Feb-16 glt    Add .secret_key inclusion
# Apr-15 glt    Add "eternal history" (from Stackoverflow 9457233/unlimited-bash-history)
# Nov-14 glt    Change "exit" to "return" in interactivity test
#               because exiting was causing X11/XQuartz to fail to start.
# Mar-14 glt    Moved PATH changing code form .bashrc_aliases
#               Removed chroot_debian code and added git branch to prompt
#	            	Add defines to support Emacs as a Daemon
# Nov-13 glt	Added PKG_CONFIG_PATH
# Jul-09 glt	Added code from my personal bash preference file

# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples
# If not running interactively, don't do anything
test "$PS1" || return

secret_key_file=~/.secret_keys
test -e $secret_key_file && source $secret_key_file

export VIM_APP_DIR=/Applications  # 4/29: System Macvim is newer than brew version, so override for now
export HOMEBREW_GITHUB_API_TOKEN=59f07ad8c0aed74f96716b08a501c5d9db29b97c
export PKG_CONFIG_PATH=/opt/X11/lib/pkgconfig

export ALTERNATE_EDITOR=""
# export EDITOR=emacsclient
export EDITOR=vim
export CLICOLOR=true

# -s[et] shell options
#  notify:    print bg job notifications immediately
#  ignoreeof: Require at least 10 EOFs before terminating a shell
set -o notify
set -o ignoreeof

#  checkwinsize: check window size after every command, updating LINES & COLUMNS if needed.
shopt -s checkwinsize

# set default file protection to 750
umask 027

#++
# Prompt Setting code
#
# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
  xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
  if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
    # We have color support; assume it's compliant with Ecma-48
    # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
    # a case would tend to support setf rather than setaf.)
    color_prompt=yes
  else
    color_prompt=
  fi
fi

# function for PS1 to display [ git branch] when it is defined
function __show_git_branch() {
  branch=`git rev-parse --abbrev-ref HEAD 2>/dev/null`
  test -n "$branch" && echo " [$branch]"
}

# Most interesting prompt escapes:
#    \h - hostname up until first '.'  (\H for entire)
#    \j - # jobs managed by shell
#    \u - username,
#    \w - cwd, \W - cwd basename
#    \! - cmd history number
#PS1='-- \u@\h:\w$(__show_git_branch) --\n\!\$ '
PS1='$(tput setaf 7)-- \u@\h:\w$(__show_git_branch) --$(tput sgr0)\n\!\$ '

# add indicator to prompt for invocation depth
case $SHLVL in
  1) PS1="${PS1}";;
  2) PS1="${PS1}> " ;;
  *) PS1="${PS1}>> " ;;
esac

#
#-- end Prompt setting code

# {app,pre}pend_to path-var-name dirpath
# remove_from path-var-name dirpath
#
# Functions to manipulate a path-style variable.  {app,pre}pend_to
# both remove any other instances of dirname before adding it to
# the start or end of the path-var-name variable.
#
# Calling example:
#   append_to PATH "/usr/local/bin"
#
# Uses eval to allow target path varname to be passed in.
function remove_from() {
  # add surrounging colons
  eval tmp_path=":\$${1}:"
  # if dir is already there, remove it
  (echo "${tmp_path}" | grep --silent ":${2}:") &&
    tmp_path=`echo "$tmp_path" | sed "s=:${2}:=:=g"`
  # remove surrounding colons
  tmp_path=`echo "$tmp_path" | sed 's=^:==; s=:$=='`
  eval export $1=\"$tmp_path\"
}
function append_to() {
  remove_from "$1" "$2"  # clean the path contents
  eval export $1=\"\$${1}:$2\"
}
function prepend_to() {
  remove_from "$1" "$2"  # clean the path contents
  eval export $1=\"${2}:\$$1\"
}

# add paths for Linux brew
case $(uname) in
  Linux)
    prepend_to PATH "$HOME/.linuxbrew/bin"
    prepend_to MANPATH "$HOME/.linuxbrew/share/man"
    prepend_to INFOPATH "$HOME/.linuxbrew/share/info"
    ;;
esac

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ]; then
  . /etc/bash_completion
fi

# add directories to PATH
# Move /usr/local/bin to front, if it is already there.  Add it to the front, if not.
prepend_to PATH /usr/local/bin
append_to PATH "~/bin"
append_to PATH /usr/sbin

# Add local node_modules directory to the path
prepend_to PATH ./node_modules/.bin

### Added for the Heroku Toolbelt
prepend_to PATH /usr/local/heroku/bin

case $(uname) in
  Darwin)
    # gt 2013: Enable shims and autocomplete for Ruby and completion for Brew
    # rbenv  init - | sed 's/export PATH=/prepend_to PATH /'
    if which rbenv > /dev/null; then
      eval "$(rbenv  init - | sed 's/export PATH=/prepend_to PATH /;s/:.*/"/')";
    fi
    source `brew --repository`/Library/Contributions/brew_bash_completion.sh
    export PATH
    ;;
esac

# Added for homebrew
prepend_to PATH /usr/local/sbin
#
#--

# raise the limit on the number of open file descriptors to support parallel builds.
# ulimit -S -n 1024

#++
# Bash history configuration

#  histappend: append to history file, do not overwrite
shopt -s histappend

# Do not put duplicate lines in the history and and do not save commands
# that begin with space. See bash(1) for more options
# export HISTCONTROL=ignoreboth

# Eternal bash history.
# Undocumented feature which sets the size to "unlimited".
# http://stackoverflow.com/questions/9457233/unlimited-bash-history
export HISTFILESIZE=
export HISTSIZE=
export HISTTIMEFORMAT="[%m-%d% %T] "

# Change the file location because certain bash sessions truncate .bash_history file upon close.
# http://superuser.com/questions/575479/bash-history-truncated-to-500-lines-on-each-login
export HISTFILE=~/.bash_eternal_history

# Force prompt to write history after every command.
# http://superuser.com/questions/20900/bash-history-loss
PROMPT_COMMAND="history -a; $PROMPT_COMMAND"
#
#--

case $LOGNAME in
  gtarsa)
    PATH="/Users/gtarsa/perl5/bin${PATH+:}${PATH}"; export PATH;
    PERL5LIB="/Users/gtarsa/perl5/lib/perl5${PERL5LIB+:}${PERL5LIB}"; export PERL5LIB;
    PERL_LOCAL_LIB_ROOT="/Users/gtarsa/perl5${PERL_LOCAL_LIB_ROOT+:}${PERL_LOCAL_LIB_ROOT}"; export PERL_LOCAL_LIB_ROOT;
    PERL_MB_OPT="--install_base \"/Users/gtarsa/perl5\""; export PERL_MB_OPT;
    PERL_MM_OPT="INSTALL_BASE=/Users/gtarsa/perl5"; export PERL_MM_OPT;
    ;;

  tarsa)
    PERL_MB_OPT="--install_base \"/Users/tarsa/perl5\""; export PERL_MB_OPT;
    PERL_MM_OPT="INSTALL_BASE=/Users/tarsa/perl5"; export PERL_MM_OPT;
    ;;
esac

#++
# Alias definitions.
# Be sure to put this after all PATH adjustments

[[ -f ~/.bash_aliases ]] && source ~/.bash_aliases

#
#--

# only use RVM if we create the ~/use_rvm file
[[ -e ~/use_rvm ]] && {
  append_to PATH ~/.rvm/bin # Add RVM to PATH for scripting
  remove_from PATH
}
