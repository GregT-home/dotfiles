#! /bin/sh
#
Usage='
    Usage: auto_results [-debug] in_dir

    auto_results writes an HTML file to stdout which describes a page
    containing a table describing each file in the specified directory.

    Flags (can be abbreviated to unambiguous length):

    -alpha_sort
	causes table to run in alphabetical order, rather than
	chronological order by modification time.

    -maintainer "default author"
        Will be used as the address for the web page maintainer.
        Should be a valid mailing address.

    -debug causes the name of each file processed to be written to stderr.

    -title "new title"
        Uses the quoted string as the title for the web page.

    The table contains four fields:
	INFO	the extension of the file, or if it is recognized as a special
	        type (i.e., postscript), the type name.
	TITLE	the title of the contents, or name of the file, if the title
	        cannot be derived. (-title can be used to override)
	DATE	the approximate creation date of the contents, or the file
		creation date, if content date cannot be derived.
	AUTHOR	mailing address of the author, if that can be derived,
	        otherwise the "--" is used (presumably causing questions
	        to be routed to the maintainer).

    This script also changes the protections on those files to allow
    world read access.

    There is a convention followed for file descriptions, based on
    endings, from which the type, subject, date and author'"'"'s return
    address are derived.

    Files ending with:

        - "#" or "~" are ignored (Emacs tmp files)
	- ".bak" are ignored (backup copies)
	- ".desc" are ignored and must contain a description for
	   any other file having the same name.
	- ".txt" is presumed to be formatted like a mail message.
	- ".html" is presumed to contain a <TITLE>...</TITLE>
	- other files are currently treated like binary files

     .desc feature not yet implemented; .desc files will be ignored.
'
# Modification History
# ~~~~~~~~~~~~~~~~~~~~
# 01 Updated for Network Appliance, Inc.
#

#
# Definition of function to display the entry.
#
print_entry() {
file="${1:-<no filename>}"
ptrname="${2:-unk}"
title="${3:-- none -}"
date="${4:---}"
authorname="${5:---}"

case $authorname in
    *@*|*::*) author="<a href="mailto:$authorname">$authorname</a>" ;;
    http:*) author='<a href="'$authorname'"> '$authorname'</a>' ;;
    *)        author="$authorname" ;;
esac

cat <<- EOF
	<tr>
	<td><a href="$file">[$ptrname]</a></td>
	<td>$title</td>
	<td>$date</td>
	<td>$author</td>
	</tr>
EOF
return
}

#
# set defaults
#
tmpfile="/tmp/auto_results$$"

def_user_name="Greg Tarsa"
def_maint="Greg.Tarsa@netapp.com"
def_author=""
def_title="Miscellaneous Publications and Helpful Files"

#
# init flags
#
err_flag=""
debug_flag=""
alpha_flag=""

#
# process flags & arguments
#
while : true
do
    case $1 in
        -d*) debug="TRUE" ;;
	-a*) alpha_flag="TRUE" ;;
	-m*) shift; tmp_maint="$1"; def_maint=${tmp_maint:-def_maint} ;;
	-t*) shift; title="$1" ;;
        -*) echo 1>&2 "?Invalid flag specified: $1$nl"; err_flag=TRUE ;;
        *) break ;;
    esac
    shift
done

case $# in
    1) ;;
    *) echo 1>&2 "?Invalid number of arguments$nl"; err_flag="TRUE" ;;
esac

case $err_flag in
    TRUE) echo 1>&2 "$Usage"; exit 1 ;;
esac

# Test input arg for validity
in_dir=$1
test -d $in_dir || {
    echo 1>&2 "? $in_dir does not exist, or is not a directory"
    exit 1
    }

rm -f $tmpfile

#cleanup after execution
trap 'rm -f $tmpfile' 0

# Get the current user's full name
user_name=`ypmatch tarsa passwd | awk -F, 'BEGIN{RS=":"}NR==5{print $1}'`

# Set the title name
title=${title:-$def_title}

# Write out the preface
cat > $tmpfile <<EOF
<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="${user_name}, HPS Benchmark Performance Engineering">
   <META NAME="GENERATOR" CONTENT="auto_web by Greg Tarsa">
   <TITLE>${title}</TITLE>
</HEAD>
<BODY BGCOLOR="#FFEBCD" LINK="#DA032A" VLINK="#5E5E5E">

<H1>${title}</H1>

<p><strong>Information presented here is For NetApp Internal Use
Only.</strong>


<table border cellpadding=2>
<th>info</th><th>title</th><th>date</th><th>author/maintainer address</th>
EOF

#
# Check sorting value: default is chronological by modification.
#
case $alpha_flag in
    TRUE*) file_list="`/bin/ls -1 $in_dir/*`" ;;
    *)     file_list="`/bin/ls -t1 $in_dir/*`" ;;
esac

# process each .txt file in the directory
for file in $file_list
do
    # set pointer defaults
    ptrname=""
    ptrtype="text"

    case "$file" in
        *#) continue ;;
	*~) continue ;;
	*.bak) continue;;
	*.desc) continue ;;

	*.txt)    ptrname="text" ;;
	*.html)   ptrname="html" ;;
	*.ps)     ptrname="postscript"; ptrtype="binary" ;;
	*.pdf)    ptrname="pdf"; ptrtype="binary" ;;
	*.dot)    ptrname="dot"; ptrtype="binary" ;;
	*.doc)    ptrname="doc"; ptrtype="binary" ;;
	*.ppt)    ptrname="ppt"; ptrtype="binary" ;;
	*.xls)    ptrname="xls"; ptrtype="binary" ;;
	*.zip)    ptrname="zip"; ptrtype="binary" ;;
	*.exe)    ptrname="exe"; ptrtype="binary" ;;
	*)	  ptrname="pointer" ;;
    esac

    # Open all files for world-read, so that the web server can see them.
    case "$ptrname" in
        "" ) ;;
	*) chmod g+r,o+r $file ;;
    esac

    test $debug && echo 1>&2 $file

    # desc processing
    # determine the extension and base file name
    ext=`expr "$file" : '.*\(\..*\)$'`

    dirname=`dirname "$file"`
    basename=`basename "$file" "$ext"`

    #
    # If we have a .desc file, use it for the information.
    #
    descfile=$dirname/${basename}.desc
    if test -f $descfile
    then
	title="`sed -n 1p $descfile`"
	date="`sed -n 3p $descfile`"

        author="`sed -n 2p $descfile`"

    print_entry "$file" "$ptrname" "$title" "$date" "$author"
    continue
    fi

    case $ptrname$ptrtype in
        #
        # text files are presumed to be formatted like mail messages.
        #    the first "Subject:" field is used for the title
        #    the first "Date:" is used for the original date
        #    the first "From:" field is used for the author-name/address
        #
        text*)
	    title=`grep '^Subject:' $file |
			head -1 |
			sed 's/^Subject:[ ]*//'`
	    date=`grep '^Date:' $file |
			head -1 |
			sed 's/^Date:[ ]*//
			     s/^.....//
			     s/\([12][90][0-9][0-9]\).*/\1/'`
	    author=`grep '^From:' $file |
		    head -1 |
		    sed 's/^From:[ ]*//;s/[ 	].*//'`
	    ;;
	#
	# HTML files are presumed to always have a <TITLE>...</TITLE>.
	#   the first line of the <TITLE> field is used for the title
	#   the file's creation date is used for the date of origin
	#   the author is defaulted to $def_author
	#
	html*)
	    title=`grep '<[Tt][Ii][Tt][Ll][Ee]>' $file |
			head -1 |
			sed 's=.*<[Tt][Ii][Tt][Ll][Ee]>==
			     s=</[Tt][Ii][Tt][Ll][Ee]>.*=='`
	    date=`/bin/ls -l $file | cut -b 42-53`
	    author=$def_author
	    ;;
	#
	# For binary files (and by default for other files)
	#   the file name is used for the title
	#   the file's creation date is used for the date of origin
	#   the author is set to $def_author
	#
	*)
	    title="<pre>$file"
	    date=`/bin/ls -l $file | cut -b 42-53`
	    author=$def_author
	    ;;
    esac

    #
    # write out the table entry for this file
    #
    print_entry "$file" "$ptrname" "$title" "$date" "$author"

done >> $tmpfile
echo "</table>" >> $tmpfile

cat >> $tmpfile <<EOF
<hr noshade>

<p>If you have a questions, or comments regarding information on this
page, please contact the indicated author, or contact $def_user_name (<A
HREF="mailto:$def_maint">$def_maint</A>).

</body>
</html>
EOF
cat $tmpfile
exit
