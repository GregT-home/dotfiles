#!/usr/local/bin/bash
USAGE='Usage: monthly-burts.sh [-datefilter xxx | -rawfile file]
    This script scans the BURT database for all BURTS submitted by
    someone in the uf-DAFS team and displays them on stdout.

    Flags:
      -datefilter xxx   display only dates matching the specified
                            string, e.g. "05/../01"
      -engineers "list" Look info up for "list" of engineer login ids
      -excel            Separate all info fields with tabs
      -rawfile file     Copy all burts into the specified "file"'
    
#
# Modification History
# ~~~~~~~~~~~~~~~~~~~~
# 04 Nov-2001, Greg Tarsa
# Added -engineer option
# Added -excel option
# Changed to add DATE_NEW value to sort scheme
#
# 03 jun-2001, Greg Tarsa
# Wrote original code based on burt-roadmap.sh
#


outfile=
rawfile=/dev/null
onlyburtfile=extra-burts-ddafs.txt
FILTER=""
datefilter="05/../01"
engineers="jcarter vmo deberg jfg tarsa"

features=feature-list-ddafs.txt
targetdate=`date +'%d-%b-%Y'`

while :
do
    # No more arguments?  All Done.
    case $# in
       0) break ;;
    esac

    # process the switches
    case $1 in
       # Raw BURT output file, if desired
       -raw|-r*)
	    shift
	    case $1 in
	        -*)
		     echo 1>&2 "?Invalid -raw filename: $1";
		     errflg=yes
		     ;;
	        "")
		     echo 1>&2 "?Missing -raw argument";
		     errflg=yes
		     ;;
	    esac
            rawfile=$1
	    ;;
	    
       # specify which dates to display
       -datefilter|-d*)
	    shift
	    case $1 in
	        -*)
		     echo 1>&2 "?Invalid -datefilter value: $1";
		     errflg=yes
		     ;;
	        "")
		     echo 1>&2 "?Missing -datefilter argument";
		     errflg=yes
		     ;;
	    esac
            datefilter=$1
	    ;;


       # specify which engineers to search for
       -engineers|-e*)
	    shift
	    case $1 in
	        -*)
		     echo 1>&2 "?Invalid -engineer id list: $1";
		     errflg=yes
		     ;;
	        "")
		     echo 1>&2 "?Missing -engineer id list";
		     errflg=yes
		     ;;
	    esac
            engineers=$1
	    ;;

       -*) echo 1>&2 "?Invalid switch: $1"; errflg=yes ;;
        *) echo 1>&2 "?Invalid argument: $1"; errflg=yes ;;
    esac
    shift
done
case $errflg in
   yes) echo 1>&2 "$USAGE"; exit 1 ;;
esac

# define the list of folks to search for
burts="(1 eq 2"
who=""
for eng in $engineers
do
    burts="$burts || \$sub_by eq '"$eng"'"
    who="$who $eng"
done
burts="$burts"')'

# Display the filter values
echo 1>&2 "FILTER=$FILTER"
echo 1>&2 "Date Filter = $datefilter"
echo burts=$who

# Grab all the qualifying records from the BURT database
# Positional field numbers:
#     type(1) subtype(2) id(3) state(4) sev(5) pri(6) owner(7)
#     sub_by(8) title(9) date_new(10)' \
#
burt report -q"$burts" \
     -f':type subtype id state sev pri owner sub_by title date_new' \
     -s'sub_by type subtype date_new state id' \
     -tabs |               # duplicate records when there are multiple P##'s
    sed '/^BURT NOTE/,/^:end/d' |
tee $rawfile |			# save raw output, if requested
nawk 'BEGIN { FS="\t" }         #  change to: sub_by\tid subtype: title (mm/dd/yy)
    { printf("%s\t%s %s: %s (%s/%s/%s)\n",
     $8, $3, $2, $9, substr($10,5,2), substr($10,7,2), substr($10,3,2)); }'| 

sed "$FILTER" |			# filter out selected types of BURTS
grep $datefilter |              # filter out uninteresting dates
sed 's=/..)$=)=' |              # remove year from output
sed ' /^!!/d; s///g'   	# strip out comments & MSDOS overhead

case $rawfile in
    /dev/null) ;;
    *) echo 1>&2 "Raw BURT list also written to $rawfile" ;;
esac
exit 0

# id	type(subtype): [p-s, state-sub_by] title (e/)
nawk 'BEGIN { FS="\t" }
    { printf("%s\t%s(%s): [%s-%s, %s-%s] %s (%s/%s)\n",
     $3, $1,$2, $6, $5, $4, $8, $9,
         substr($9,5,2), substr($9,7,2)); }'|
