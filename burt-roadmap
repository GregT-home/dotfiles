#!/usr/local/bin/bash
USAGE='?Usage: burt-roadmap.sh [-flag [arg]]
    Combines the specified roadmap file (or feature-list-ddafs.txt) with
    all SW_CLIENT vi_drv_nstrk BURTS from the BUR database into a report
    on stdout.  The report is suitable for input into Excel.

    -all     include all BURTS, regardless of status
    -active  exclude FIXED, DUP and CLOSED burts
    -extraburt file
             add the list of BURT ids in "file" to those found in search.
             If not used, file is vendor dependent:
                 emulex: vi_drv_gni-extra-burts.txt
                 troika: vi_drv_nstrk-extra-burts.txt
    -map file
            take the roadmap file from "file"
    -new     exclude all but NEW burts
    -omit "XXX"
            exclude XXX burts. This flag can be specified multiple
            times.
    -open    exclude FIXED, DUP, CLOSED, TESTME and STUDY burts
    -raw file
            output unfiltered BURT list into "file"
    -testme  only display TESTME burts
    -vendor xxx
            List BURTS for this vendor. xxx= giganet, emulex or troika
            (abbrev will work).  If flag not specified, troika is default.

  Flags can be shortened to their minimally differentiable abbreviations.
'
    
#
# Get the current BURTS and make a summary, Priority related .csv file
# out of them.
#
# Modification History
# ~~~~~~~~~~~~~~~~~~~~
# 03 jun-2001, Greg Tarsa
# Added code to remove "sqa_pri" keyword
# Added -extra flag
# Added -vendor flag
# Added -testme flag
#
# 02 may-2001, Greg Tarsa
# Added -all for All BURTS
# Added -active for non-FIXED, non-CLOSED, non-COSMIC, non-DUP BURTS
# Added -open for only OPEN BURTS
# Added -type "type" for only "type" BUTS
#
# 01 apr-2001, Greg Tarsa
# Wrote original code
# Added code to produce a raw Roadmap file.
#


rawfile=/dev/null
features=feature-list-ddafs.txt
vendor="vi_drv_nstrk"
date=`date +'%d-%b-%Y'`


FILTER=""
while :
do
    # No more arguments?  All Done.
    case $# in
       0) break ;;
    esac

    # process the switches
    case $1 in

       # show every BURT in the list
       -all|-al*) FILTER="" ;;

       # shorthand for unresolved BURTS
       -active|-ac*)
           FILTER='/, FIXED-/d
		   /, DUP-/d
		   /, CLOSED-/d'
	   ;;

       # shorthand for OPEN/COSMIC/NEW BURTS
       -open|-op*)
           FILTER='/, FIXED-/d
		   /, DUP-/d
		   /, CLOSED-/d
		   /, TESTME-/d
		   /, STUDY-/d'
           ;;

       # shorthand for TESTME BURTS only
       -testme|-t*)
           FILTER='/, FIXED-/d
		   /, DUP-/d
		   /, CLOSED-/d
		   /, NEW-/d
		   /, STUDY-/d
		   /, COSMIC-/d
		   /, OPEN-/d'
           ;;

       # shorthand for NEW BURTS only
       -new|-n*)
           FILTER='/, FIXED-/d
		   /, DUP-/d
		   /, CLOSED-/d
		   /, TESTME-/d
		   /, STUDY-/d
		   /, COSMIC-/d
		   /, OPEN-/d'
           ;;

       # omit BURTS that are in the following state
       -omit|-om*)
	    shift
	    case $1 in
	        -*)
		     echo 1>&2 "?Invalid -omit argument: $1";
		     errflg=yes
		     ;;
	        "")
		     echo 1>&2 "?Missing -omit argument";
		     errflg=yes
		     ;;
	    esac
            FILTER="$FILTER
	            /, ""$1""-/d
		   "
	    ;;

       # Raw BURT output file, if desired
       -raw|-r*)
	    shift
	    case $1 in
	        -*)
		     echo 1>&2 "?Invalid -raw filename: $1";
		     errflg=yes
		     ;;
	        "")
		     echo 1>&2 "?Missing -raw argument";
		     errflg=yes
		     ;;
	    esac
            rawfile=$1
	    ;;

       # specify a specific vendor
       -vendor|-v*)
	    shift
	    case $1 in
	        -*)
		     echo 1>&2 "?Invalid -vendor string: $1";
		     errflg=yes
		     ;;
	        "")
		     echo 1>&2 "?Missing -bendor argument";
		     errflg=yes
		     ;;
	    esac
	    case $1 in
		giganet|g*) vendor="vi_drv_gni" ;;
		emulex|e*)  vendor="vi_drv_gni" ;;
		troika|t*)  vendor="vi_drv_nstrk" ;;
	    esac
	    ;;
	    
       # feature map file: contains the items in the roadmap
       -map|-f*)
	    shift
	    case $1 in
	        -*)
		     echo 1>&2 "?Invalid -map filename: $1";
		     errflg=yes
		     ;;
	        "")
		     echo 1>&2 "?Missing -map argument";
		     errflg=yes
		     ;;
	    esac
            features=$1
	    ;;
	    
       # extra BURTS file, for adding BURTS not found in the search
       -extraburts|-ex*)
	    shift
	    case $1 in
	        -*)
		     echo 1>&2 "?Invalid -extraburts filename: $1";
		     errflg=yes
		     ;;
	        "")
		     echo 1>&2 "?Missing -extraburts argument";
		     errflg=yes
		     ;;
	    esac
            extrafile=$1
	    ;;
	    
       -*) echo 1>&2 "?Invalid switch: $1"; errflg=yes
        ;;
    esac
    shift
done
case $errflg in
   yes) echo 1>&2 "$USAGE"; exit 1 ;;
esac

echo 1>&2 "subtype=$vendor"
echo 1>&2 "FILTER=$FILTER"

# Define the BURT type we are looking to map
burttype='$type eq "SW_CLIENT" && $subtype eq "'$vendor'"'

# Define the list of extra burts, if any
case $extrafile in
    "") xtraburtsfile="$vendor"-"extra-burts.txt" ;;
    *)  xtraburtsfile="$extrafile" ;;
esac

test -e $xtraburtsfile || echo 1>&2 "no extra BURTS in $xtraburtsfile"
test -e $xtraburtsfile &&
    {
    closed='$state ne "FIXED" && $state ne "DUP" && $state ne "CLOSED"'
    echo 1>&2 "extra BURTS: " `fmt -1 $xtraburtsfile`

    xtraburts="|| ((1 eq 2 "`fmt -1 $xtraburtsfile |
        	     sed 's/^[	 ]*/|| $id eq "/
	                  s/[	]*$/" /'`") && ($closed))"
    }
xtraburts=`echo $xtraburts`

# Grab all the qualifying records from the BURT database
# Positional field values:
#     keywords(1) id(2) state(3) sev(4) pri(5) owner(6)
#     sub_by(7) title(8) date_new(9)'
#    sed 's/,sqa_pri//;s/sqa_pri//;s/,sqa_pri//' |
burt report -q"($burttype) $xtraburts" \
     -f':keywords id state sev pri owner sub_by title date_new' \
     -s'id state pri sev keywords sub_by' \
     -tabs |               # duplicate records when there are multiple P##'s
    sed '/^BURT NOTE/,/^:end/d'|
nawk 'BEGIN {FS="\t"}
{
    if ($1 == "-") $1="---"      # set blank prioities to "---"

    # multiple Roadmap priorities?
    # Duplicate BURT for each one.
    if (match($1,/^P[0-9][0-9]*,/) > 0)
       {
       split($1, P, /,/)
       for (prio in P)
	 {
         # build a list of the other priorities for adding
	 # to the title for reference. Fmt: "(Px,Py...)"
	 see_others="("
         for (others in P)
	   {
	   if (P[others] != P[prio])
	       {
	       if (see_others != "(")
	           see_others=see_others "," P[others]
	       else
		   see_others=see_others P[others]
	       }
	   }
	   see_others=see_others ")"

         # print out a record for this priority w/the other priorities
	 # prepended on the title of the BURT in parens.
	 $1=P[prio]
	 saved_val=$(NF-1)
	 $(NF-1)=see_others " " $(NF-1)
	 print $0 
	 $(NF-1)=saved_val
	 }
       }
     else
        {
	 # print record if it has a priority or placeholder (---)
	 if ($1 ~ /^P[0-9]/ || $1 == "---")
	   {
	   print $0
	   }
	 else
	   {
	   # otherwise preface it with Z88 to force it to
	   # collate to the end
	   # setting of OFS is a workaround to a nawk bug
	   OFS="\t"
	   $1="Z88" $1
	   print $0
	   }
	}
}' |				# turn into "### P##: [p-s, state-submit] title" format
tee $rawfile |
nawk 'BEGIN { FS="\t" }
    { printf("%s\t%s: [%s-%s, %s-%s] %s (%s/%s)\n",
     $2, $1, $5, $4, $3, $7, $8,
         substr($9,5,2), substr($9,7,2)); }'|
sed "$FILTER" |			# filter out selected types of BURTS
cat - $features |		# add the Roadmap records
sed ' /^!!/d; s///g' |	# strip out comments & MSDOS overhead
sort -k 2.2n |			# mix well (RM records should be tagged to sort properly)
sed '/^[ 	]*$/d' |	# remove blank lines
sed '
    0s**			# remove sorting string overhead*
    /Z88keywords/d
    /^00/ !{
	s/^/	/
	}
    /^00/s///
    /.88RTP/s/.88RTP/RTP/
    /	Z88/s/Z88//
    /	9[0-9]/s/9[0-9]//
    /	Z9[0-9]/s/Z9[0-9]//
    ' |				# Add date to first line & remove tab
sed "1s/^	++//
     1s=\$=$date=" |
sed '2,${
         /^	/s/^/	/
	}'
case $rawfile in
    /dev/null) ;;
    *) echo 1>&2 "Raw BURT list also written to $rawfile" ;;
esac
exit 0

